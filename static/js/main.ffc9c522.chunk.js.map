{"version":3,"sources":["components/Nav.js","components/Header.js","components/Statistic.js","components/News.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","to","Component","Header","Statistic","News","Main","path","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PA8BeA,E,kDAxBX,aAAe,IAAD,8BACV,gBAEKC,MAAQ,GAHH,E,qDAQV,OACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,mBAAT,cAGJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,cAAT,e,GAjBNC,aCiBHC,E,kDAlBX,aAAe,IAAD,8BACV,gBAEKH,MAAQ,GAHH,E,qDAQV,OACI,gCACI,kBAAC,EAAD,MAEA,0D,GAbKE,aCgBNE,E,kDAhBX,aAAe,IAAD,8BACV,gBAEKJ,MAAQ,GAHH,E,qDAQV,OACI,8C,GAVYE,aCiBTG,E,kDAhBX,aAAe,IAAD,8BACV,gBAEKL,MAAQ,GAHH,E,qDAQV,OACI,yC,GAVOE,aC+BJI,E,kDAxBX,aAAe,IAAD,8BACV,gBAEKN,MAAQ,GAHH,E,qDAQV,OACI,8BACI,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOO,KAAK,mBACR,kBAAC,EAAD,OAGJ,kBAAC,IAAD,CAAOA,KAAK,cACR,kBAAC,EAAD,Y,GAlBDL,aCwBJM,E,kDAtBb,aAAe,IAAD,8BACZ,gBACKR,MAAQ,GAFD,E,qDAQZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,IAAIE,OAAK,GACnB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOF,KAAK,UACV,kBAAC,EAAD,Y,GAhBQL,aCGEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ffc9c522.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Link\n} from 'react-router-dom';\n\nclass Nav extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <nav>\n                <ul>\n                    <li>\n                        <Link to='/info/statistic'>statistic</Link>\n                    </li>\n\n                    <li>\n                        <Link to='/info/news'>news</Link>\n                    </li>\n                </ul>\n            </nav>\n         );\n    }\n}\n \nexport default Nav;","import React, { Component } from 'react';\nimport Nav from './Nav';\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <header>\n                <Nav />\n\n                <h1>save the one you love</h1>\n            </header>\n         );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\n\nclass Statistic extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <div>\n                statistic\n            </div>\n         );\n    }\n}\n \nexport default Statistic;","import React, { Component } from 'react';\n\nclass News extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            \n        }\n    }\n    render() { \n        return ( \n            <div>\n                news\n            </div>\n         );\n    }\n}\n \nexport default News;","import React, { Component } from 'react';\nimport {\n    Route,\n} from 'react-router-dom';\nimport Nav from './Nav';\nimport Statistic from './Statistic';\nimport News from './News';\n\nclass Main extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        };\n    }\n    render() { \n        return ( \n            <main>\n                <Nav />\n\n                <Route path='/info/statistic'>\n                    <Statistic />\n                </Route>\n\n                <Route path='/info/news'>\n                    <News />\n                </Route>\n            </main>\n         );\n    }\n}\n \nexport default Main;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n\n    }\n  }\n\n  render() { \n    return ( \n      <Router>\n        <Route path='/' exact >\n          <Header />\n        </Route>\n\n        <Route path='/info/' >\n          <Main />\n        </Route>\n      </Router>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}