{"version":3,"sources":["components/Nav.js","components/Header.js","components/Statistic.js","components/News.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","className","to","Component","Header","this","props","currentStatus","cases","active","recovered","deaths","Statistic","searchCountry","e","preventDefault","country","searchInput","current","value","searchedCountry","worldStatus","filter","status","toLowerCase","includes","setState","React","createRef","axios","url","method","then","res","seriousness","data","sort","a","b","currentDate","length","onSubmit","ref","id","type","map","i","key","todayCases","todayDeaths","toFixed","News","news","params","language","q","from","sortBy","apiKey","pageSize","page","articles","title","author","publishedAt","slice","src","urlToImage","alt","description","href","App","now","Date","year","getFullYear","month","getMonth","date","getDate","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79b1258e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Link\n} from 'react-router-dom';\n\nclass Nav extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <nav className='nav'>\n                <ul>\n                    <li>\n                        <Link to='/changmoSungCovid19/'>HOME</Link>\n                    </li>\n                    <li>\n\n                        <Link to='/changmoSungCovid19/info/statistic'>STATISTIC</Link>\n                    </li>\n\n                    <li>\n                        <Link to='/changmoSungCovid19/info/news'>NEWS</Link>\n                    </li>\n                </ul>\n            </nav>\n         );\n    }\n}\n \nexport default Nav;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <header>\n                <h1>SAVE THE ONE YOU LOVE</h1>\n\n                <ul className='currentStatusList'>\n                    <li>Total cases: {this.props.currentStatus.cases}</li>\n                    <li>Total active: {this.props.currentStatus.active}</li>\n                    <li>Total recovered: {this.props.currentStatus.recovered}</li>\n                    <li>Total deaths: {this.props.currentStatus.deaths}</li>\n                </ul>\n            </header>\n         );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Statistic extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            worldStatus: [],\n            searchedCountry: [],\n        };\n        this.searchInput = React.createRef();\n    }\n\n    componentDidMount() {\n        axios({\n            url: `https://corona.lmao.ninja/countries?sort=country`,\n            method: \"GET\",\n        }).then(res => {\n            const seriousness = res.data.sort((a, b) => a.cases > b.cases ? -1 : 1);\n            \n            this.setState({\n                worldStatus: seriousness\n            })\n        })\n    }\n\n    searchCountry = (e) => {\n        e.preventDefault();\n\n        const country = this.searchInput.current.value;\n\n        const searchedCountry = this.state.worldStatus.filter(status => status.country.toLowerCase().includes(country.toLowerCase()));\n\n        this.setState({\n            searchedCountry\n        })\n\n        this.searchInput.current.value = '';\n    }\n\n    render() { \n        return ( \n            <div className='statistic'>\n                <h2>As of {this.props.currentDate}</h2>\n\n                <ul className='currentStatusList'>\n                    <li>Affected countries: {this.state.worldStatus.length}</li>\n                    <li>Total cases: {this.props.currentStatus.cases}</li>\n                    <li>Total active: {this.props.currentStatus.active}</li>\n                    <li>Total recovered: {this.props.currentStatus.recovered}</li>\n                    <li>Total deaths: {this.props.currentStatus.deaths}</li>\n                </ul>\n\n                <div className='searchFormContainer'>\n                    <form onSubmit={this.searchCountry}>\n                        <input ref={this.searchInput} id='country' type='text'></input>\n                        <button>SEARCH</button>\n                    </form>\n                </div>\n\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Country</th>\n\n                            <th>Cases</th>\n\n                            <th>Active</th>\n\n                            <th>Recovered</th>\n\n                            <th>Deaths</th>\n\n                            <th>Death toll</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {this.state.searchedCountry.map((country, i) => {\n                            return (\n                                <tr key={i}>\n                                    <td className='searchedCountry'>* {country.country}</td>\n\n                                    <td className='totalCases'>\n                                        <span>\n                                            {country.cases}\n                                        </span>\n                                        <span>\n                                            <span className='arrow'></span>\n                                            {country.todayCases}\n                                        </span>\n                                    </td>\n\n                                    <td>{country.active}</td>\n\n                                    <td>{country.recovered}</td>\n\n                                    <td className='totalDeaths'>\n                                        <span>{country.deaths}</span>\n                                        <span>\n                                            <span className='arrow'></span>\n                                            {country.todayDeaths}\n                                        </span>\n                                    </td>\n\n                                    <td>{(100 / (country.cases / country.deaths)).toFixed(2)}%</td>\n                                </tr>\n                            )\n                        })}\n\n                        {this.state.worldStatus.map((status, i) => {\n                            return (\n                                <tr key={i}>\n                                    <td>{status.country}</td>\n\n                                    <td className='totalCases'>\n                                        <span>{status.cases}</span>\n                                        <span>\n                                            <span className='arrow'></span>\n                                            {status.todayCases}\n                                        </span>\n                                    </td>\n\n                                    <td>{status.active}</td>\n\n                                    <td>{status.recovered}</td>\n\n                                    <td className='totalDeaths'>\n                                        <span>{status.deaths}</span>\n                                        <span>\n                                            <span className='arrow'></span>\n\n                                            <span>{status.todayDeaths}</span>\n                                        </span>\n                                    </td>\n\n                                    <td>{(100 / (status.cases / status.deaths)).toFixed(2)}%</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n         );\n    }\n}\n \nexport default Statistic;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass News extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            news: [],\n        }\n    }\n\n    componentDidMount() {\n        axios({\n            url: 'https://newsapi.org/v2/top-headlines',\n            method: \"GET\",\n            params: {\n                language: 'en',\n                q: 'COVID',\n                from: '2020-03-16',\n                sortBy: 'publishedAt',\n                apiKey: '0741cdf2415e4f44a92f80f69c904834',\n                pageSize: '50',\n                page: '1'\n            }\n        }).then(res => {\n            this.setState({\n                news: res.data.articles\n            })\n        })\n    }\n\n    render() { \n        return ( \n            <div className='news'>\n                <ul className='newsList'>\n                    {this.state.news.map((news, i) => {\n                        return (\n                            <li key={i}>\n                                <h3>{news.title}</h3>\n\n                                <p>By {!news.author || news.author.includes('http') ? 'anonymous author' : news.author}</p>\n\n                                <p>Published on {news.publishedAt.slice(0, 10)}</p>\n\n                                <div className='newsArticle'>\n                                    <img src={news.urlToImage} alt='article'></img>\n                                </div>\n\n                                <p className='newsDescription'>{news.description}</p>\n\n                                <a href={news.url}>Link to the article</a>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n         );\n    }\n}\n \nexport default News;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport axios from 'axios';\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport Statistic from './components/Statistic';\nimport News from './components/News';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentDate: '',\n      currentStatus: {},\n    }\n  }\n\n  componentDidMount() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth();\n    const date = now.getDate();\n    const currentDate = `${year}-${month > 9 ? `${month + 1}` : `0${month + 1}`}-${date}`;\n\n    axios({\n      url: `https://corona.lmao.ninja/all`,\n      method: \"GET\",\n    }).then(res => {\n      this.setState({\n        currentDate,\n        currentStatus: res.data\n      })\n    })\n  }\n\n  render() { \n    return ( \n      <Router>\n        <Nav />\n        \n        <Route path='/changmoSungCovid19/' exact >\n          <Header currentStatus={this.state.currentStatus} />\n        </Route>\n\n        <Route path='/changmoSungCovid19/info/' >\n          <main>\n            <Route path='/changmoSungCovid19/info/statistic'>\n              <Statistic currentDate={this.state.currentDate} currentStatus={this.state.currentStatus} />\n            </Route>\n\n            <Route path='/changmoSungCovid19/info/news'>\n              <News />\n            </Route>\n          </main>\n        </Route>\n      </Router>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}