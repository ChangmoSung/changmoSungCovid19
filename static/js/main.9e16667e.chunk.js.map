{"version":3,"sources":["components/Nav.js","components/Header.js","components/Statistic.js","components/News.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","className","to","Component","Header","this","props","currentStatus","cases","deaths","recovered","active","Statistic","searchCountry","e","preventDefault","searchedCountry","searchInput","current","value","match","worldStatus","filter","country","toLowerCase","setState","React","createRef","axios","url","method","then","res","seriousness","data","sort","a","b","currentDate","length","onSubmit","htmlFor","ref","id","type","map","i","key","todayCases","todayDeaths","toFixed","status","News","news","params","language","q","from","sortBy","apiKey","pageSize","page","articles","title","author","includes","publishedAt","slice","src","urlToImage","alt","description","href","App","now","Date","year","getFullYear","month","getMonth","date","getDate","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e16667e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Link\n} from 'react-router-dom';\n\nclass Nav extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <nav className='nav'>\n                <ul>\n                    <li>\n                        <Link to='/changmoSungCovid19/info/statistic'>STATISTIC</Link>\n                    </li>\n\n                    <li>\n                        <Link to='/changmoSungCovid19/info/news'>NEWS</Link>\n                    </li>\n                </ul>\n            </nav>\n         );\n    }\n}\n \nexport default Nav;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n\n        }\n    }\n    render() { \n        return ( \n            <header>\n                <h1>save the one you love</h1>\n\n                <ul className='currentStatusList'>\n                    <li>total cases: {this.props.currentStatus.cases}</li>\n                    <li>deaths: {this.props.currentStatus.deaths}</li>\n                    <li>recovered: {this.props.currentStatus.recovered}</li>\n                    <li>active: {this.props.currentStatus.active}</li>\n                </ul>\n            </header>\n         );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Statistic extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            worldStatus: [],\n            searchedCountry: [],\n        };\n        this.searchInput = React.createRef();\n    }\n\n    componentDidMount() {\n        axios({\n            url: `https://corona.lmao.ninja/countries?sort=country`,\n            method: \"GET\",\n        }).then(res => {\n            const seriousness = res.data.sort((a, b) => a.cases > b.cases ? -1 : 1);\n            \n            this.setState({\n                worldStatus: seriousness\n            })\n        })\n    }\n\n    searchCountry = (e) => {\n        e.preventDefault();\n\n        const searchedCountry = this.searchInput.current.value;\n\n        const match = this.state.worldStatus.filter(country => country.country.toLowerCase() === searchedCountry.toLowerCase());\n\n        this.setState({\n            searchedCountry: match,\n        })\n    }\n\n    render() { \n        return ( \n            <div className='statistic wrapper'>\n                <h2>As of {this.props.currentDate}</h2>\n\n                <ul className='currentStatusList'>\n                    <li>Number of affected countries: {this.state.worldStatus.length}</li>\n                    <li>Total cases: {this.props.currentStatus.cases}</li>\n                    <li>Deaths: {this.props.currentStatus.deaths}</li>\n                    <li>Recovered: {this.props.currentStatus.recovered}</li>\n                    <li>Active: {this.props.currentStatus.active}</li>\n                </ul>\n\n                <div className='searchFormContainer'>\n                    <form onSubmit={this.searchCountry}>\n                        <label htmlFor='country'>Search for country</label>\n                        <input ref={this.searchInput} id='country' type='text'></input>\n                        <button>SEARCH</button>\n                    </form>\n                </div>\n\n                {this.state.searchedCountry.map((country, i) => {\n                    return (\n                        <p className='searchedCountry' key={i}>\n                            <span>{country.country}</span>\n                            <span>{country.cases}</span>\n                            <span>{country.todayCases}</span>\n                            <span>{country.active}</span>\n                            <span>{country.recovered}</span>\n                            <span>{country.deaths}</span>\n                            <span>{country.todayDeaths}</span>\n                            <span>{(100 / (country.cases / country.deaths)).toFixed(2)}%</span>\n                        </p>\n                    )\n                })}\n\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Country</th>\n                            <th>Total cases</th>\n                            <th>Today cases</th>\n                            <th>Active</th>\n                            <th>Recovered</th>\n                            <th>Total deaths</th>\n                            <th>Today deaths</th>\n                            <th>Death toll</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {this.state.worldStatus.map((status, i) => {\n                            return (\n                                <tr key={i}>\n                                    <td>{status.country}</td>\n                                    <td>{status.cases}</td>\n                                    <td>{status.todayCases}</td>\n                                    <td>{status.active}</td>\n                                    <td>{status.recovered}</td>\n                                    <td>{status.deaths}</td>\n                                    <td>{status.todayDeaths}</td>\n                                    <td>{(100 / (status.cases / status.deaths)).toFixed(2)}%</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n         );\n    }\n}\n \nexport default Statistic;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass News extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            news: [],\n        }\n    }\n\n    componentDidMount() {\n        axios({\n            url: 'https://newsapi.org/v2/top-headlines',\n            method: \"GET\",\n            params: {\n                language: 'en',\n                q: 'COVID',\n                from: '2020-03-16',\n                sortBy: 'publishedAt',\n                apiKey: '0741cdf2415e4f44a92f80f69c904834',\n                pageSize: '50',\n                page: '1'\n            }\n        }).then(res => {\n            this.setState({\n                news: res.data.articles\n            })\n        })\n    }\n\n    render() { \n        return ( \n            <div className='news'>\n                <ul className='newsList wrapper'>\n                    {this.state.news.map((news, i) => {\n                        return (\n                            <li key={i}>\n                                <h3>{news.title}</h3>\n\n                                <p>By {!news.author || news.author.includes('http') ? 'anonymous author' : news.author}</p>\n\n                                <p>Published on {news.publishedAt.slice(0, 10)}</p>\n\n                                <div>\n                                    <img src={news.urlToImage} alt='article'></img>\n                                </div>\n\n                                <p>{news.description}</p>\n\n                                <a href={news.url}>link to the article</a>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n         );\n    }\n}\n \nexport default News;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport axios from 'axios';\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport Statistic from './components/Statistic';\nimport News from './components/News';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentDate: '',\n      currentStatus: {},\n    }\n  }\n\n  componentDidMount() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth();\n    const date = now.getDate();\n    const currentDate = `${year}-${month > 9 ? `${month + 1}` : `0${month + 1}`}-${date}`;\n\n    axios({\n      url: `https://corona.lmao.ninja/all`,\n      method: \"GET\",\n    }).then(res => {\n      this.setState({\n        currentDate,\n        currentStatus: res.data\n      })\n    })\n  }\n\n  render() { \n    return ( \n      <Router>\n        <Nav />\n        \n        <Route path='/changmoSungCovid19/' exact >\n          <Header currentStatus={this.state.currentStatus} />\n        </Route>\n\n        <Route path='/changmoSungCovid19/info/' >\n          <main>\n            <Route path='/changmoSungCovid19/info/statistic'>\n              <Statistic currentDate={this.state.currentDate} currentStatus={this.state.currentStatus} />\n            </Route>\n\n            <Route path='/changmoSungCovid19/info/news'>\n              <News />\n            </Route>\n          </main>\n        </Route>\n      </Router>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}